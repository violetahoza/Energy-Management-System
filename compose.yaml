services:
  reverse-proxy:
    image: traefik:v3.2
    container_name: reverse-proxy
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.level=INFO"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_logs:/var/log/traefik
    networks:
      - energy_management_network
    restart: always

  credentials_db:
    image: mysql
    container_name: credentials_db
    environment:
      MYSQL_DATABASE: credentials_db
      MYSQL_USER: credentials_user
      MYSQL_PASSWORD: credentials_pass
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "4000:3306"
    volumes:
      - credentials_data:/var/lib/mysql
    networks:
      - energy_management_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_db:
    image: mysql
    container_name: users_db
    environment:
      MYSQL_DATABASE: users_db
      MYSQL_USER: users_user
      MYSQL_PASSWORD: users_pass
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "4001:3306"
    volumes:
      - users_data:/var/lib/mysql
    networks:
      - energy_management_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  devices_db:
    image: mysql
    container_name: devices_db
    environment:
      MYSQL_DATABASE: devices_db
      MYSQL_USER: devices_user
      MYSQL_PASSWORD: devices_pass
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "4002:3306"
    volumes:
      - devices_data:/var/lib/mysql
    networks:
      - energy_management_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  authorization-service:
    build: ./backend/authorization-service
    container_name: authorization-service
    ports:
      - "8083:8083"
    environment:
      DB_HOST: credentials_db
      DB_USER: credentials_user
      DB_PASS: credentials_pass
      DB_NAME: credentials_db
    depends_on:
      credentials_db:
        condition: service_healthy
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"
      # Public endpoints (login, register) - no auth required
      - "traefik.http.routers.auth-public.rule=PathPrefix(`/api/auth`) && (Path(`/api/auth/login`) || Path(`/api/auth/register`))"
      - "traefik.http.routers.auth-public.entrypoints=web"
      - "traefik.http.routers.auth-public.priority=100"
      - "traefik.http.routers.auth-public.middlewares=cors-headers"
      # Protected endpoints (logout, user) - require auth
      - "traefik.http.routers.auth-protected.rule=PathPrefix(`/api/auth`) && !PathPrefix(`/api/auth/internal`) && !(Path(`/api/auth/login`) || Path(`/api/auth/register`))"
      - "traefik.http.routers.auth-protected.entrypoints=web"
      - "traefik.http.routers.auth-protected.priority=99"
      - "traefik.http.routers.auth-protected.middlewares=auth-middleware,cors-headers"
      # Internal endpoints - no auth, higher priority
      - "traefik.http.routers.auth-internal.rule=PathPrefix(`/api/auth/internal`)"
      - "traefik.http.routers.auth-internal.entrypoints=web"
      - "traefik.http.routers.auth-internal.priority=101"
      - "traefik.http.routers.auth-internal.middlewares=cors-headers"
      - "traefik.http.services.auth.loadbalancer.server.port=8083"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=http://localhost:3000,http://localhost:4200"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=GET,POST,PUT,PATCH,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowCredentials=true"
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://authorization-service:8083/api/auth/validate"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-Id,X-Username,X-User-Role"
    restart: always

  user-service:
    build: ./backend/user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      DB_HOST: users_db
      DB_USER: users_user
      DB_PASS: users_pass
      DB_NAME: users_db
    depends_on:
      users_db:
        condition: service_healthy
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"
      # Internal endpoints - highest priority, no auth
      - "traefik.http.routers.users-internal.rule=PathPrefix(`/api/users/internal`)"
      - "traefik.http.routers.users-internal.entrypoints=web"
      - "traefik.http.routers.users-internal.priority=101"
      - "traefik.http.routers.users-internal.middlewares=cors-headers"
      # Regular endpoints - require auth
      - "traefik.http.routers.users.rule=PathPrefix(`/api/users`) && !PathPrefix(`/api/users/internal`)"
      - "traefik.http.routers.users.entrypoints=web"
      - "traefik.http.routers.users.priority=50"
      - "traefik.http.routers.users.middlewares=auth-middleware,cors-headers"
      - "traefik.http.services.user-service.loadbalancer.server.port=8081"
    restart: always


  device-service:
    build: ./backend/device-service
    container_name: device-service
    ports:
      - "8082:8082"
    environment:
      DB_HOST: devices_db
      DB_USER: devices_user
      DB_PASS: devices_pass
      DB_NAME: devices_db
    depends_on:
      devices_db:
        condition: service_healthy
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"
      # Sync endpoints - highest priority, no auth (for service-to-service)
      - "traefik.http.routers.devices-sync.rule=PathPrefix(`/api/devices/sync`)"
      - "traefik.http.routers.devices-sync.entrypoints=web"
      - "traefik.http.routers.devices-sync.priority=101"
      - "traefik.http.routers.devices-sync.middlewares=cors-headers"
      # Regular device endpoints - require auth
      - "traefik.http.routers.devices.rule=PathPrefix(`/api/devices`) && !PathPrefix(`/api/devices/sync`)"
      - "traefik.http.routers.devices.entrypoints=web"
      - "traefik.http.routers.devices.priority=100"
      - "traefik.http.routers.devices.middlewares=auth-middleware,cors-headers"
      - "traefik.http.services.devices.loadbalancer.server.port=8082"
    restart: always

  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost
      - WATCHPACK_POLLING=true
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.priority=1"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    stdin_open: true
    tty: true
    restart: always

volumes:
  credentials_data:
  users_data:
  devices_data:
  traefik_logs:

networks:
  energy_management_network:
    driver: bridge