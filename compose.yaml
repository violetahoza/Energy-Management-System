services:
  # Traefik Reverse Proxy
  reverse-proxy:
    image: traefik:v3.2
    container_name: reverse-proxy
    command:
      - "--api.insecure=true"
      - "--providers.docker"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.level=INFO"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"      # HTTP entry point
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # partea de network cu docker
      - traefik_logs:/var/log/traefik
    networks:
      - energy_management_network
    restart: always

  # Databases
  credentials_db:
    image: mysql
    container_name: credentials_db
    environment:
      MYSQL_DATABASE: credentials_db
      MYSQL_USER: credentials_user
      MYSQL_PASSWORD: credentials_pass
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "4000:3306"
    volumes:
      - credentials_data:/var/lib/mysql
    networks:
      - energy_management_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  users_db:
    image: mysql
    container_name: users_db
    environment:
      MYSQL_DATABASE: users_db
      MYSQL_USER: users_user
      MYSQL_PASSWORD: users_pass
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "4001:3306"
    volumes:
      - users_data:/var/lib/mysql
    networks:
      - energy_management_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  devices_db:
    image: mysql
    container_name: devices_db
    environment:
      MYSQL_DATABASE: devices_db
      MYSQL_USER: devices_user
      MYSQL_PASSWORD: devices_pass
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "4002:3306"
    volumes:
      - devices_data:/var/lib/mysql
    networks:
      - energy_management_network
    restart: always
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Services
  authorization-service:
    build: ./backend/authorization-service
    container_name: authorization-service
    ports:
      - "8083:8083"
    environment:
      DB_HOST: credentials_db
      DB_USER: credentials_user
      DB_PASS: credentials_pass
      DB_NAME: credentials_db
    depends_on:
      credentials_db:
        condition: service_healthy
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"

      # Login endpoint - public
      - "traefik.http.routers.auth-login.rule=PathPrefix(`/api/auth/login`)"
      - "traefik.http.routers.auth-login.entrypoints=web"
      - "traefik.http.routers.auth-login.priority=100"
      - "traefik.http.routers.auth-login.middlewares=cors-headers"

      # Register endpoint - public
      - "traefik.http.routers.auth-register.rule=PathPrefix(`/api/auth/register`)"
      - "traefik.http.routers.auth-register.entrypoints=web"
      - "traefik.http.routers.auth-register.priority=99"
      - "traefik.http.routers.auth-register.middlewares=cors-headers"

      # Other auth endpoints (logout, validate, user) - require authentication
      - "traefik.http.routers.auth-protected.rule=PathPrefix(`/api/auth`) && !PathPrefix(`/api/auth/login`) && !PathPrefix(`/api/auth/register`) && !PathPrefix(`/api/auth/internal`)"
      - "traefik.http.routers.auth-protected.entrypoints=web"
      - "traefik.http.routers.auth-protected.priority=98"
      - "traefik.http.routers.auth-protected.middlewares=auth-middleware,cors-headers"

      # Internal endpoints - not exposed through gateway
      - "traefik.http.routers.auth-internal.rule=PathPrefix(`/api/auth/internal`)"
      - "traefik.http.routers.auth-internal.entrypoints=web"
      - "traefik.http.routers.auth-internal.priority=101"
      - "traefik.http.routers.auth-internal.middlewares=cors-headers"

      # Service configuration
      - "traefik.http.services.auth.loadbalancer.server.port=8083"

      # CORS middleware
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowOriginList=http://localhost:3000,http://localhost:4200"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowMethods=GET,POST,PUT,PATCH,DELETE,OPTIONS"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowHeaders=Content-Type,Authorization"
      - "traefik.http.middlewares.cors-headers.headers.accessControlAllowCredentials=true"

      # Auth middleware - uses ForwardAuth to validate tokens
      - "traefik.http.middlewares.auth-middleware.forwardauth.address=http://authorization-service:8083/api/auth/validate"
      - "traefik.http.middlewares.auth-middleware.forwardauth.authResponseHeaders=X-User-Id,X-Username,X-User-Role"
    restart: always

  user-service:
    build: ./backend/user-service
    container_name: user-service
    ports:
      - "8081:8081"
    environment:
      DB_HOST: users_db
      DB_USER: users_user
      DB_PASS: users_pass
      DB_NAME: users_db
    depends_on:
      users_db:
        condition: service_healthy
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"

      # Admin endpoints - require authentication
      - "traefik.http.routers.admin.rule=PathPrefix(`/api/admin`)"
      - "traefik.http.routers.admin.entrypoints=web"
      - "traefik.http.routers.admin.priority=100"
      - "traefik.http.routers.admin.middlewares=auth-middleware,admin-only,cors-headers"

      # Regular user endpoints - require authentication
      - "traefik.http.routers.users.rule=PathPrefix(`/api/users`)"
      - "traefik.http.routers.users.entrypoints=web"
      - "traefik.http.routers.users.priority=50"
      - "traefik.http.routers.users.middlewares=auth-middleware,cors-headers"

      # Service configuration
      - "traefik.http.services.user-service.loadbalancer.server.port=8081"

      # Admin-only middleware (strips non-ADMIN requests)
      - "traefik.http.middlewares.admin-only.headers.customRequestHeaders.X-Required-Role=ADMIN"
    restart: always

  device-service:
    build: ./backend/device-service
    container_name: device-service
    ports:
      - "8082:8082"
    environment:
      DB_HOST: devices_db
      DB_USER: devices_user
      DB_PASS: devices_pass
      DB_NAME: devices_db
    depends_on:
      devices_db:
        condition: service_healthy
    networks:
      - energy_management_network
    labels:
      - "traefik.enable=true"

      # All device endpoints require authentication
      - "traefik.http.routers.devices.rule=PathPrefix(`/api/devices`) && !PathPrefix(`/api/devices/sync`)"
      - "traefik.http.routers.devices.entrypoints=web"
      - "traefik.http.routers.devices.priority=100"
      - "traefik.http.routers.devices.middlewares=auth-middleware,cors-headers"

      # Sync endpoints - internal only (still protected but lower priority)
      - "traefik.http.routers.devices-sync.rule=PathPrefix(`/api/devices/sync`)"
      - "traefik.http.routers.devices-sync.entrypoints=web"
      - "traefik.http.routers.devices-sync.priority=101"
      - "traefik.http.routers.devices-sync.middlewares=cors-headers"

      # Service configuration
      - "traefik.http.services.devices.loadbalancer.server.port=8082"
    restart: always

volumes:
  credentials_data:
  users_data:
  devices_data:
  traefik_logs:

networks:
  energy_management_network:
    driver: bridge